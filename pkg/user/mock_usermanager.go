// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package user

import (
	"sync"
)

var (
	lockManagerMockCreate sync.RWMutex
	lockManagerMockDelete sync.RWMutex
)

// Ensure, that ManagerMock does implement Manager.
// If this is not the case, regenerate this file with moq.
var _ Manager = &ManagerMock{}

// ManagerMock is a mock implementation of Manager.
//
//     func TestSomethingThatUsesManager(t *testing.T) {
//
//         // make and configure a mocked Manager
//         mockedManager := &ManagerMock{
//             CreateFunc: func(user *Definition) error {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(user *Definition) error {
// 	               panic("mock out the Delete method")
//             },
//         }
//
//         // use mockedManager in code that requires Manager
//         // and then make assertions.
//
//     }
type ManagerMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(user *Definition) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(user *Definition) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// User is the user argument value.
			User *Definition
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// User is the user argument value.
			User *Definition
		}
	}
}

// Create calls CreateFunc.
func (mock *ManagerMock) Create(user *Definition) error {
	if mock.CreateFunc == nil {
		panic("ManagerMock.CreateFunc: method is nil but Manager.Create was just called")
	}
	callInfo := struct {
		User *Definition
	}{
		User: user,
	}
	lockManagerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockManagerMockCreate.Unlock()
	return mock.CreateFunc(user)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedManager.CreateCalls())
func (mock *ManagerMock) CreateCalls() []struct {
	User *Definition
} {
	var calls []struct {
		User *Definition
	}
	lockManagerMockCreate.RLock()
	calls = mock.calls.Create
	lockManagerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ManagerMock) Delete(user *Definition) error {
	if mock.DeleteFunc == nil {
		panic("ManagerMock.DeleteFunc: method is nil but Manager.Delete was just called")
	}
	callInfo := struct {
		User *Definition
	}{
		User: user,
	}
	lockManagerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockManagerMockDelete.Unlock()
	return mock.DeleteFunc(user)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedManager.DeleteCalls())
func (mock *ManagerMock) DeleteCalls() []struct {
	User *Definition
} {
	var calls []struct {
		User *Definition
	}
	lockManagerMockDelete.RLock()
	calls = mock.calls.Delete
	lockManagerMockDelete.RUnlock()
	return calls
}
