// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package metrics

import (
	"sync"
)

var (
	lockManagerMockSendCommand sync.RWMutex
)

// Ensure, that ManagerMock does implement Manager.
// If this is not the case, regenerate this file with moq.
var _ Manager = &ManagerMock{}

// ManagerMock is a mock implementation of Manager.
//
//     func TestSomethingThatUsesManager(t *testing.T) {
//
//         // make and configure a mocked Manager
//         mockedManager := &ManagerMock{
//             SendCommandFunc: func(cmdUse *CmdUse) error {
// 	               panic("mock out the SendCommand method")
//             },
//         }
//
//         // use mockedManager in code that requires Manager
//         // and then make assertions.
//
//     }
type ManagerMock struct {
	// SendCommandFunc mocks the SendCommand method.
	SendCommandFunc func(cmdUse *CmdUse) error

	// calls tracks calls to the methods.
	calls struct {
		// SendCommand holds details about calls to the SendCommand method.
		SendCommand []struct {
			// CmdUse is the cmdUse argument value.
			CmdUse *CmdUse
		}
	}
}

// SendCommand calls SendCommandFunc.
func (mock *ManagerMock) SendCommand(cmdUse *CmdUse) error {
	if mock.SendCommandFunc == nil {
		panic("ManagerMock.SendCommandFunc: method is nil but Manager.SendCommand was just called")
	}
	callInfo := struct {
		CmdUse *CmdUse
	}{
		CmdUse: cmdUse,
	}
	lockManagerMockSendCommand.Lock()
	mock.calls.SendCommand = append(mock.calls.SendCommand, callInfo)
	lockManagerMockSendCommand.Unlock()
	return mock.SendCommandFunc(cmdUse)
}

// SendCommandCalls gets all the calls that were made to SendCommand.
// Check the length with:
//     len(mockedManager.SendCommandCalls())
func (mock *ManagerMock) SendCommandCalls() []struct {
	CmdUse *CmdUse
} {
	var calls []struct {
		CmdUse *CmdUse
	}
	lockManagerMockSendCommand.RLock()
	calls = mock.calls.SendCommand
	lockManagerMockSendCommand.RUnlock()
	return calls
}
