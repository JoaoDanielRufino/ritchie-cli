// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package env

import (
	"sync"
)

var (
	lockResolverMockResolve sync.RWMutex
)

// Ensure, that ResolverMock does implement Resolver.
// If this is not the case, regenerate this file with moq.
var _ Resolver = &ResolverMock{}

// ResolverMock is a mock implementation of Resolver.
//
//     func TestSomethingThatUsesResolver(t *testing.T) {
//
//         // make and configure a mocked Resolver
//         mockedResolver := &ResolverMock{
//             ResolveFunc: func(name string) (string, error) {
// 	               panic("mock out the Resolve method")
//             },
//         }
//
//         // use mockedResolver in code that requires Resolver
//         // and then make assertions.
//
//     }
type ResolverMock struct {
	// ResolveFunc mocks the Resolve method.
	ResolveFunc func(name string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Resolve holds details about calls to the Resolve method.
		Resolve []struct {
			// Name is the name argument value.
			Name string
		}
	}
}

// Resolve calls ResolveFunc.
func (mock *ResolverMock) Resolve(name string) (string, error) {
	if mock.ResolveFunc == nil {
		panic("ResolverMock.ResolveFunc: method is nil but Resolver.Resolve was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockResolverMockResolve.Lock()
	mock.calls.Resolve = append(mock.calls.Resolve, callInfo)
	lockResolverMockResolve.Unlock()
	return mock.ResolveFunc(name)
}

// ResolveCalls gets all the calls that were made to Resolve.
// Check the length with:
//     len(mockedResolver.ResolveCalls())
func (mock *ResolverMock) ResolveCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockResolverMockResolve.RLock()
	calls = mock.calls.Resolve
	lockResolverMockResolve.RUnlock()
	return calls
}
