// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package login

import (
	"sync"
)

var (
	lockManagerMockAuthenticate sync.RWMutex
	lockManagerMockSession      sync.RWMutex
)

// Ensure, that ManagerMock does implement Manager.
// If this is not the case, regenerate this file with moq.
var _ Manager = &ManagerMock{}

// ManagerMock is a mock implementation of Manager.
//
//     func TestSomethingThatUsesManager(t *testing.T) {
//
//         // make and configure a mocked Manager
//         mockedManager := &ManagerMock{
//             AuthenticateFunc: func(cred *Credential) error {
// 	               panic("mock out the Authenticate method")
//             },
//             SessionFunc: func() (*Session, error) {
// 	               panic("mock out the Session method")
//             },
//         }
//
//         // use mockedManager in code that requires Manager
//         // and then make assertions.
//
//     }
type ManagerMock struct {
	// AuthenticateFunc mocks the Authenticate method.
	AuthenticateFunc func(cred *Credential) error

	// SessionFunc mocks the Session method.
	SessionFunc func() (*Session, error)

	// calls tracks calls to the methods.
	calls struct {
		// Authenticate holds details about calls to the Authenticate method.
		Authenticate []struct {
			// Cred is the cred argument value.
			Cred *Credential
		}
		// Session holds details about calls to the Session method.
		Session []struct {
		}
	}
}

// Authenticate calls AuthenticateFunc.
func (mock *ManagerMock) Authenticate(cred *Credential) error {
	if mock.AuthenticateFunc == nil {
		panic("ManagerMock.AuthenticateFunc: method is nil but Manager.Authenticate was just called")
	}
	callInfo := struct {
		Cred *Credential
	}{
		Cred: cred,
	}
	lockManagerMockAuthenticate.Lock()
	mock.calls.Authenticate = append(mock.calls.Authenticate, callInfo)
	lockManagerMockAuthenticate.Unlock()
	return mock.AuthenticateFunc(cred)
}

// AuthenticateCalls gets all the calls that were made to Authenticate.
// Check the length with:
//     len(mockedManager.AuthenticateCalls())
func (mock *ManagerMock) AuthenticateCalls() []struct {
	Cred *Credential
} {
	var calls []struct {
		Cred *Credential
	}
	lockManagerMockAuthenticate.RLock()
	calls = mock.calls.Authenticate
	lockManagerMockAuthenticate.RUnlock()
	return calls
}

// Session calls SessionFunc.
func (mock *ManagerMock) Session() (*Session, error) {
	if mock.SessionFunc == nil {
		panic("ManagerMock.SessionFunc: method is nil but Manager.Session was just called")
	}
	callInfo := struct {
	}{}
	lockManagerMockSession.Lock()
	mock.calls.Session = append(mock.calls.Session, callInfo)
	lockManagerMockSession.Unlock()
	return mock.SessionFunc()
}

// SessionCalls gets all the calls that were made to Session.
// Check the length with:
//     len(mockedManager.SessionCalls())
func (mock *ManagerMock) SessionCalls() []struct {
} {
	var calls []struct {
	}
	lockManagerMockSession.RLock()
	calls = mock.calls.Session
	lockManagerMockSession.RUnlock()
	return calls
}
