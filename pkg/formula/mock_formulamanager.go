// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package formula

import (
	"sync"
)

var (
	lockManagerMockRun sync.RWMutex
)

// Ensure, that ManagerMock does implement Manager.
// If this is not the case, regenerate this file with moq.
var _ Manager = &ManagerMock{}

// ManagerMock is a mock implementation of Manager.
//
//     func TestSomethingThatUsesManager(t *testing.T) {
//
//         // make and configure a mocked Manager
//         mockedManager := &ManagerMock{
//             RunFunc: func(def Definition) error {
// 	               panic("mock out the Run method")
//             },
//         }
//
//         // use mockedManager in code that requires Manager
//         // and then make assertions.
//
//     }
type ManagerMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(def Definition) error

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// Def is the def argument value.
			Def Definition
		}
	}
}

// Run calls RunFunc.
func (mock *ManagerMock) Run(def Definition) error {
	if mock.RunFunc == nil {
		panic("ManagerMock.RunFunc: method is nil but Manager.Run was just called")
	}
	callInfo := struct {
		Def Definition
	}{
		Def: def,
	}
	lockManagerMockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	lockManagerMockRun.Unlock()
	return mock.RunFunc(def)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//     len(mockedManager.RunCalls())
func (mock *ManagerMock) RunCalls() []struct {
	Def Definition
} {
	var calls []struct {
		Def Definition
	}
	lockManagerMockRun.RLock()
	calls = mock.calls.Run
	lockManagerMockRun.RUnlock()
	return calls
}
