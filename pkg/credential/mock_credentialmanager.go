// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package credential

import (
	"sync"
)

var (
	lockManagerMockConfigs sync.RWMutex
	lockManagerMockGet     sync.RWMutex
	lockManagerMockSave    sync.RWMutex
)

// Ensure, that ManagerMock does implement Manager.
// If this is not the case, regenerate this file with moq.
var _ Manager = &ManagerMock{}

// ManagerMock is a mock implementation of Manager.
//
//     func TestSomethingThatUsesManager(t *testing.T) {
//
//         // make and configure a mocked Manager
//         mockedManager := &ManagerMock{
//             ConfigsFunc: func() (map[string][]Config, error) {
// 	               panic("mock out the Configs method")
//             },
//             GetFunc: func(provider string) (*Secret, error) {
// 	               panic("mock out the Get method")
//             },
//             SaveFunc: func(s *Secret) error {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedManager in code that requires Manager
//         // and then make assertions.
//
//     }
type ManagerMock struct {
	// ConfigsFunc mocks the Configs method.
	ConfigsFunc func() (map[string][]Config, error)

	// GetFunc mocks the Get method.
	GetFunc func(provider string) (*Secret, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(s *Secret) error

	// calls tracks calls to the methods.
	calls struct {
		// Configs holds details about calls to the Configs method.
		Configs []struct {
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Provider is the provider argument value.
			Provider string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// S is the s argument value.
			S *Secret
		}
	}
}

// Configs calls ConfigsFunc.
func (mock *ManagerMock) Configs() (map[string][]Config, error) {
	if mock.ConfigsFunc == nil {
		panic("ManagerMock.ConfigsFunc: method is nil but Manager.Configs was just called")
	}
	callInfo := struct {
	}{}
	lockManagerMockConfigs.Lock()
	mock.calls.Configs = append(mock.calls.Configs, callInfo)
	lockManagerMockConfigs.Unlock()
	return mock.ConfigsFunc()
}

// ConfigsCalls gets all the calls that were made to Configs.
// Check the length with:
//     len(mockedManager.ConfigsCalls())
func (mock *ManagerMock) ConfigsCalls() []struct {
} {
	var calls []struct {
	}
	lockManagerMockConfigs.RLock()
	calls = mock.calls.Configs
	lockManagerMockConfigs.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ManagerMock) Get(provider string) (*Secret, error) {
	if mock.GetFunc == nil {
		panic("ManagerMock.GetFunc: method is nil but Manager.Get was just called")
	}
	callInfo := struct {
		Provider string
	}{
		Provider: provider,
	}
	lockManagerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockManagerMockGet.Unlock()
	return mock.GetFunc(provider)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedManager.GetCalls())
func (mock *ManagerMock) GetCalls() []struct {
	Provider string
} {
	var calls []struct {
		Provider string
	}
	lockManagerMockGet.RLock()
	calls = mock.calls.Get
	lockManagerMockGet.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *ManagerMock) Save(s *Secret) error {
	if mock.SaveFunc == nil {
		panic("ManagerMock.SaveFunc: method is nil but Manager.Save was just called")
	}
	callInfo := struct {
		S *Secret
	}{
		S: s,
	}
	lockManagerMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockManagerMockSave.Unlock()
	return mock.SaveFunc(s)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedManager.SaveCalls())
func (mock *ManagerMock) SaveCalls() []struct {
	S *Secret
} {
	var calls []struct {
		S *Secret
	}
	lockManagerMockSave.RLock()
	calls = mock.calls.Save
	lockManagerMockSave.RUnlock()
	return calls
}
