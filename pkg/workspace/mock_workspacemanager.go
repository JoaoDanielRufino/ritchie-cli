// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package workspace

import (
	"sync"
)

var (
	lockManagerMockCheckWorkingDir sync.RWMutex
	lockManagerMockInitWorkingDir  sync.RWMutex
)

// Ensure, that ManagerMock does implement Manager.
// If this is not the case, regenerate this file with moq.
var _ Manager = &ManagerMock{}

// ManagerMock is a mock implementation of Manager.
//
//     func TestSomethingThatUsesManager(t *testing.T) {
//
//         // make and configure a mocked Manager
//         mockedManager := &ManagerMock{
//             CheckWorkingDirFunc: func() error {
// 	               panic("mock out the CheckWorkingDir method")
//             },
//             InitWorkingDirFunc: func() error {
// 	               panic("mock out the InitWorkingDir method")
//             },
//         }
//
//         // use mockedManager in code that requires Manager
//         // and then make assertions.
//
//     }
type ManagerMock struct {
	// CheckWorkingDirFunc mocks the CheckWorkingDir method.
	CheckWorkingDirFunc func() error

	// InitWorkingDirFunc mocks the InitWorkingDir method.
	InitWorkingDirFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// CheckWorkingDir holds details about calls to the CheckWorkingDir method.
		CheckWorkingDir []struct {
		}
		// InitWorkingDir holds details about calls to the InitWorkingDir method.
		InitWorkingDir []struct {
		}
	}
}

// CheckWorkingDir calls CheckWorkingDirFunc.
func (mock *ManagerMock) CheckWorkingDir() error {
	if mock.CheckWorkingDirFunc == nil {
		panic("ManagerMock.CheckWorkingDirFunc: method is nil but Manager.CheckWorkingDir was just called")
	}
	callInfo := struct {
	}{}
	lockManagerMockCheckWorkingDir.Lock()
	mock.calls.CheckWorkingDir = append(mock.calls.CheckWorkingDir, callInfo)
	lockManagerMockCheckWorkingDir.Unlock()
	return mock.CheckWorkingDirFunc()
}

// CheckWorkingDirCalls gets all the calls that were made to CheckWorkingDir.
// Check the length with:
//     len(mockedManager.CheckWorkingDirCalls())
func (mock *ManagerMock) CheckWorkingDirCalls() []struct {
} {
	var calls []struct {
	}
	lockManagerMockCheckWorkingDir.RLock()
	calls = mock.calls.CheckWorkingDir
	lockManagerMockCheckWorkingDir.RUnlock()
	return calls
}

// InitWorkingDir calls InitWorkingDirFunc.
func (mock *ManagerMock) InitWorkingDir() error {
	if mock.InitWorkingDirFunc == nil {
		panic("ManagerMock.InitWorkingDirFunc: method is nil but Manager.InitWorkingDir was just called")
	}
	callInfo := struct {
	}{}
	lockManagerMockInitWorkingDir.Lock()
	mock.calls.InitWorkingDir = append(mock.calls.InitWorkingDir, callInfo)
	lockManagerMockInitWorkingDir.Unlock()
	return mock.InitWorkingDirFunc()
}

// InitWorkingDirCalls gets all the calls that were made to InitWorkingDir.
// Check the length with:
//     len(mockedManager.InitWorkingDirCalls())
func (mock *ManagerMock) InitWorkingDirCalls() []struct {
} {
	var calls []struct {
	}
	lockManagerMockInitWorkingDir.RLock()
	calls = mock.calls.InitWorkingDir
	lockManagerMockInitWorkingDir.RUnlock()
	return calls
}
