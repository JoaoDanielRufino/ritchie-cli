// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package context

import (
	"sync"
)

var (
	lockManagerMockDelete sync.RWMutex
	lockManagerMockSet    sync.RWMutex
	lockManagerMockShow   sync.RWMutex
)

// Ensure, that ManagerMock does implement Manager.
// If this is not the case, regenerate this file with moq.
var _ Manager = &ManagerMock{}

// ManagerMock is a mock implementation of Manager.
//
//     func TestSomethingThatUsesManager(t *testing.T) {
//
//         // make and configure a mocked Manager
//         mockedManager := &ManagerMock{
//             DeleteFunc: func() error {
// 	               panic("mock out the Delete method")
//             },
//             SetFunc: func(ctx string) error {
// 	               panic("mock out the Set method")
//             },
//             ShowFunc: func() (string, error) {
// 	               panic("mock out the Show method")
//             },
//         }
//
//         // use mockedManager in code that requires Manager
//         // and then make assertions.
//
//     }
type ManagerMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func() error

	// SetFunc mocks the Set method.
	SetFunc func(ctx string) error

	// ShowFunc mocks the Show method.
	ShowFunc func() (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Ctx is the ctx argument value.
			Ctx string
		}
		// Show holds details about calls to the Show method.
		Show []struct {
		}
	}
}

// Delete calls DeleteFunc.
func (mock *ManagerMock) Delete() error {
	if mock.DeleteFunc == nil {
		panic("ManagerMock.DeleteFunc: method is nil but Manager.Delete was just called")
	}
	callInfo := struct {
	}{}
	lockManagerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockManagerMockDelete.Unlock()
	return mock.DeleteFunc()
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedManager.DeleteCalls())
func (mock *ManagerMock) DeleteCalls() []struct {
} {
	var calls []struct {
	}
	lockManagerMockDelete.RLock()
	calls = mock.calls.Delete
	lockManagerMockDelete.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *ManagerMock) Set(ctx string) error {
	if mock.SetFunc == nil {
		panic("ManagerMock.SetFunc: method is nil but Manager.Set was just called")
	}
	callInfo := struct {
		Ctx string
	}{
		Ctx: ctx,
	}
	lockManagerMockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	lockManagerMockSet.Unlock()
	return mock.SetFunc(ctx)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//     len(mockedManager.SetCalls())
func (mock *ManagerMock) SetCalls() []struct {
	Ctx string
} {
	var calls []struct {
		Ctx string
	}
	lockManagerMockSet.RLock()
	calls = mock.calls.Set
	lockManagerMockSet.RUnlock()
	return calls
}

// Show calls ShowFunc.
func (mock *ManagerMock) Show() (string, error) {
	if mock.ShowFunc == nil {
		panic("ManagerMock.ShowFunc: method is nil but Manager.Show was just called")
	}
	callInfo := struct {
	}{}
	lockManagerMockShow.Lock()
	mock.calls.Show = append(mock.calls.Show, callInfo)
	lockManagerMockShow.Unlock()
	return mock.ShowFunc()
}

// ShowCalls gets all the calls that were made to Show.
// Check the length with:
//     len(mockedManager.ShowCalls())
func (mock *ManagerMock) ShowCalls() []struct {
} {
	var calls []struct {
	}
	lockManagerMockShow.RLock()
	calls = mock.calls.Show
	lockManagerMockShow.RUnlock()
	return calls
}
