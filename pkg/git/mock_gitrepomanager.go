// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package git

import (
	"sync"
)

var (
	lockRepoManagerMockPlainClone sync.RWMutex
	lockRepoManagerMockPull       sync.RWMutex
)

// Ensure, that RepoManagerMock does implement RepoManager.
// If this is not the case, regenerate this file with moq.
var _ RepoManager = &RepoManagerMock{}

// RepoManagerMock is a mock implementation of RepoManager.
//
//     func TestSomethingThatUsesRepoManager(t *testing.T) {
//
//         // make and configure a mocked RepoManager
//         mockedRepoManager := &RepoManagerMock{
//             PlainCloneFunc: func(path string, o *Options) error {
// 	               panic("mock out the PlainClone method")
//             },
//             PullFunc: func(path string, o *Options) error {
// 	               panic("mock out the Pull method")
//             },
//         }
//
//         // use mockedRepoManager in code that requires RepoManager
//         // and then make assertions.
//
//     }
type RepoManagerMock struct {
	// PlainCloneFunc mocks the PlainClone method.
	PlainCloneFunc func(path string, o *Options) error

	// PullFunc mocks the Pull method.
	PullFunc func(path string, o *Options) error

	// calls tracks calls to the methods.
	calls struct {
		// PlainClone holds details about calls to the PlainClone method.
		PlainClone []struct {
			// Path is the path argument value.
			Path string
			// O is the o argument value.
			O *Options
		}
		// Pull holds details about calls to the Pull method.
		Pull []struct {
			// Path is the path argument value.
			Path string
			// O is the o argument value.
			O *Options
		}
	}
}

// PlainClone calls PlainCloneFunc.
func (mock *RepoManagerMock) PlainClone(path string, o *Options) error {
	if mock.PlainCloneFunc == nil {
		panic("RepoManagerMock.PlainCloneFunc: method is nil but RepoManager.PlainClone was just called")
	}
	callInfo := struct {
		Path string
		O    *Options
	}{
		Path: path,
		O:    o,
	}
	lockRepoManagerMockPlainClone.Lock()
	mock.calls.PlainClone = append(mock.calls.PlainClone, callInfo)
	lockRepoManagerMockPlainClone.Unlock()
	return mock.PlainCloneFunc(path, o)
}

// PlainCloneCalls gets all the calls that were made to PlainClone.
// Check the length with:
//     len(mockedRepoManager.PlainCloneCalls())
func (mock *RepoManagerMock) PlainCloneCalls() []struct {
	Path string
	O    *Options
} {
	var calls []struct {
		Path string
		O    *Options
	}
	lockRepoManagerMockPlainClone.RLock()
	calls = mock.calls.PlainClone
	lockRepoManagerMockPlainClone.RUnlock()
	return calls
}

// Pull calls PullFunc.
func (mock *RepoManagerMock) Pull(path string, o *Options) error {
	if mock.PullFunc == nil {
		panic("RepoManagerMock.PullFunc: method is nil but RepoManager.Pull was just called")
	}
	callInfo := struct {
		Path string
		O    *Options
	}{
		Path: path,
		O:    o,
	}
	lockRepoManagerMockPull.Lock()
	mock.calls.Pull = append(mock.calls.Pull, callInfo)
	lockRepoManagerMockPull.Unlock()
	return mock.PullFunc(path, o)
}

// PullCalls gets all the calls that were made to Pull.
// Check the length with:
//     len(mockedRepoManager.PullCalls())
func (mock *RepoManagerMock) PullCalls() []struct {
	Path string
	O    *Options
} {
	var calls []struct {
		Path string
		O    *Options
	}
	lockRepoManagerMockPull.RLock()
	calls = mock.calls.Pull
	lockRepoManagerMockPull.RUnlock()
	return calls
}
