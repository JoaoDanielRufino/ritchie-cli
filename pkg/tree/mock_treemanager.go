// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tree

import (
	"sync"
)

var (
	lockManagerMockGetLocalTree    sync.RWMutex
	lockManagerMockLoadAndSaveTree sync.RWMutex
)

// Ensure, that ManagerMock does implement Manager.
// If this is not the case, regenerate this file with moq.
var _ Manager = &ManagerMock{}

// ManagerMock is a mock implementation of Manager.
//
//     func TestSomethingThatUsesManager(t *testing.T) {
//
//         // make and configure a mocked Manager
//         mockedManager := &ManagerMock{
//             GetLocalTreeFunc: func() (*Representation, error) {
// 	               panic("mock out the GetLocalTree method")
//             },
//             LoadAndSaveTreeFunc: func() error {
// 	               panic("mock out the LoadAndSaveTree method")
//             },
//         }
//
//         // use mockedManager in code that requires Manager
//         // and then make assertions.
//
//     }
type ManagerMock struct {
	// GetLocalTreeFunc mocks the GetLocalTree method.
	GetLocalTreeFunc func() (*Representation, error)

	// LoadAndSaveTreeFunc mocks the LoadAndSaveTree method.
	LoadAndSaveTreeFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// GetLocalTree holds details about calls to the GetLocalTree method.
		GetLocalTree []struct {
		}
		// LoadAndSaveTree holds details about calls to the LoadAndSaveTree method.
		LoadAndSaveTree []struct {
		}
	}
}

// GetLocalTree calls GetLocalTreeFunc.
func (mock *ManagerMock) GetLocalTree() (*Representation, error) {
	if mock.GetLocalTreeFunc == nil {
		panic("ManagerMock.GetLocalTreeFunc: method is nil but Manager.GetLocalTree was just called")
	}
	callInfo := struct {
	}{}
	lockManagerMockGetLocalTree.Lock()
	mock.calls.GetLocalTree = append(mock.calls.GetLocalTree, callInfo)
	lockManagerMockGetLocalTree.Unlock()
	return mock.GetLocalTreeFunc()
}

// GetLocalTreeCalls gets all the calls that were made to GetLocalTree.
// Check the length with:
//     len(mockedManager.GetLocalTreeCalls())
func (mock *ManagerMock) GetLocalTreeCalls() []struct {
} {
	var calls []struct {
	}
	lockManagerMockGetLocalTree.RLock()
	calls = mock.calls.GetLocalTree
	lockManagerMockGetLocalTree.RUnlock()
	return calls
}

// LoadAndSaveTree calls LoadAndSaveTreeFunc.
func (mock *ManagerMock) LoadAndSaveTree() error {
	if mock.LoadAndSaveTreeFunc == nil {
		panic("ManagerMock.LoadAndSaveTreeFunc: method is nil but Manager.LoadAndSaveTree was just called")
	}
	callInfo := struct {
	}{}
	lockManagerMockLoadAndSaveTree.Lock()
	mock.calls.LoadAndSaveTree = append(mock.calls.LoadAndSaveTree, callInfo)
	lockManagerMockLoadAndSaveTree.Unlock()
	return mock.LoadAndSaveTreeFunc()
}

// LoadAndSaveTreeCalls gets all the calls that were made to LoadAndSaveTree.
// Check the length with:
//     len(mockedManager.LoadAndSaveTreeCalls())
func (mock *ManagerMock) LoadAndSaveTreeCalls() []struct {
} {
	var calls []struct {
	}
	lockManagerMockLoadAndSaveTree.RLock()
	calls = mock.calls.LoadAndSaveTree
	lockManagerMockLoadAndSaveTree.RUnlock()
	return calls
}
